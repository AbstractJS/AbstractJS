//File : src/controller.js

(function(x){
  'use strict';
/**
 * Controller definition
 * @param      {string}   controllerName
 * @param      {HTMLElement}   controllerName
 */
 x.Controller = function(){


  /**
   * Check if this controller is being generated by DOM or API
   */
   if (arguments[1].tagName || arguments[1] == 'API_CALL'){

    this.htmlElement = arguments[1];
    this.controllerName = arguments[0];
    this.watchers = [];
    this.placeholders = [];
    return {


      /**
       * [addPlaceholder description]
       * @param {[type]} field
       * @param {[type]} place
       */
       addPlaceholder : function(field,place){
        
        if (!this.placeholders)
          this.placeholders = {};
        if (!this.placeholders[field])
          this.placeholders[field] = [];

        this.placeholders[field].push(place);
      },


      /**
       * [getPlaceholders description]
       * @param  {[type]} index
       * @return {[type]}
       */
       getPlaceholders : function(index){
        return this.placeholders[index];
      },


      /**
       * [watch description]
       * @param  {[type]}   field
       * @param  {Function} callback
       * @return {[type]}
       */
       watch : function(field,callback){
        if (!this.watchers)
          this.watchers = {};
        if (!this.watchers[field])
          this.watchers[field] = [];

        this.watchers[field].push(callback);

      },

      /**
       * [xApply description]
       * @param  {[type]} action
       * @param  {[type]} params
       * @return {[type]}
       */
       xApply : function(action,params){

        action.apply(this,params);

        var changes = action.toString().match(/(this..+?\s*=)|(this..+?\s*.splice)|(this..+?\s*.split)/g);
        if (changes !== null){
          var i = 0;
          while (i < changes.length){
            var changed = changes[i];
            var repI = i;
            console.log(changed);


            changed = changed.replace(/(\s?=)|(this\.)|(this\[)/,'').replace(/\s?=/,'').replace(/\'\]/,'').replace("'",'').replace(/\.split/,'').replace(/\.splice/,'');
            if (this.watchers){
              for (var watcher in this.watchers[changed]){
                this.watchers[changed][watcher]();
              }
            }

            var links =  this.getPlaceholders('{{'+changed+'}}');
            for (var link in links){
              if (links[link].originalFields['{{'+changed+'}}'] != this[changed]){
                links[link].textContent = links[link].originalText;
                links[link].originalFields['{{'+changed+'}}'] = this[changed];
                links[link].textContent = x.core.render(links[link],links[link].originalFields);
              }
            }
            i++;
          }
        }
      },


      /**
       * [appendModel description]
       * @param  {[type]} model
       * @return {[type]}
       */
       appendModel : function(model){
        this[model.getModelName()] = model; 
      }
    };
    
  }else{
    /**
     * Controller DO NOT exists
     */
     if (x.controllers[arguments[0]] === undefined){
      /**
       * Created the contoller
       */
       x.controllers[arguments[0]] = new x.Controller(arguments[0],'API_CALL');
     }

    var controller = x.controllers[arguments[0]];
    var dependencies = x.core.checkDependencies(arguments[1]);



    if (typeof arguments[1] === 'object'){
        arguments[1][arguments[1].length-1].apply(controller,dependencies);
     }else{
        arguments[1].apply(controller,dependencies); 
     }
     
     return x.controllers[arguments[0]];
   }
 };

})(this.x);
