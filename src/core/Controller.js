//File : src/controller.js

(function(x){
  'use strict';

  x.Controller = function(controllerName,htmlElement){

    //Check if this controller is being generated by DOM or API
    if (arguments[1].tagName || arguments[1] == 'API_CALL'){

      this.htmlElement = htmlElement;
      this.controllerName = controllerName;
      this.watchers = [];
      this.placeholders = [];
      return {

        addPlaceholder : function(field,place){
          
          if (!this.placeholders)
            this.placeholders = {};
          if (!this.placeholders[field])
            this.placeholders[field] = [];

          this.placeholders[field].push(place);
        },

        getPlaceholders : function(index){
          return this.placeholders[index];
        },

        watch : function(field,callback){
          if (!this.watchers)
            this.watchers = {};
          if (!this.watchers[field])
            this.watchers[field] = [];

          this.watchers[field].push(callback);

        },
        xApply : function(action,params){

          action.apply(this,params);

          var changes = action.toString().match(/(this..+?\s*=)|(this..+?\s*.splice)|(this..+?\s*.split)/g);

          if (changes !== null){
            changes.forEach(function(changed,repI){

              changed = changed.replace(/(\s?=)|(this\.)|(this\[)/,'').replace(/\s?=/,'').replace(/\'\]/,'').replace("'",'').replace(/\.split/,'').replace(/\.splice/,'');

              for (var watcher in this.watchers[changed]){
                this.watchers[changed][watcher]();
              }

              var links =  this.getPlaceholders('{{'+changed+'}}');
              for (var link in links){
                if (links[link].originalFields['{{'+changed+'}}'] != this[changed]){
                  links[link].textContent = links[link].originalText;
                  links[link].originalFields['{{'+changed+'}}'] = this[changed];
                  links[link].textContent = x.core.render(links[link],links[link].originalFields);
                }
              }
            }.bind(this));
          }
        },
        appendModel : function(model){
          this[model.getModelName()] = model; 
        }
      };
      
    }else{

      if (x.controllers[controllerName] === undefined){
        //Controller DO NOT exists
        x.controllers[controllerName] = new x.Controller(controllerName,'API_CALL');
      }


      arguments[1][arguments[1].length-1].apply(x.controllers[controllerName],x.core.checkDependencies(arguments[1]));
      // arguments[1][arguments[1].length-1].call(x.controllers[controllerName]);
      return x.controllers[controllerName];
    }
  };

})(this.x);